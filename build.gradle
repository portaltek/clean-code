plugins {
    id 'org.springframework.boot' version '2.3.0.RELEASE'
    id "io.spring.dependency-management" version "1.0.6.RELEASE"
    id 'java'
    id 'idea'
    id "groovy"
    id "com.palantir.docker" version "0.22.1"
    id "com.palantir.docker-run" version "0.22.1"
}

description = """clean-code project"""
sourceCompatibility = 15
targetCompatibility = 15
version '1.0.0'


configurations {
    itestImplementation.extendsFrom testImplementation
    itestRuntime.extendsFrom testRuntime
}
sourceSets {
    itest {
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
}

dependencies {
    implementation(
            'org.springframework.boot:spring-boot-starter-web',
            'org.springframework.boot:spring-boot-starter-actuator',
            'org.springframework.boot:spring-boot-starter-security',
            'org.springframework.boot:spring-boot-starter-data-jpa',
            'org.apache.commons:commons-collections4:4.4',
            'org.apache.commons:commons-lang3:3.9',
            'org.slf4j:slf4j-api:1.7.25',
            'ch.qos.logback:logback-classic:1.2.3',
            'io.jsonwebtoken:jjwt:0.9.0',
            'org.projectlombok:lombok:1.18.8',
            'org.codehaus.groovy:groovy:3.0.5'
    )

    runtimeOnly 'com.h2database:h2'
    annotationProcessor 'org.projectlombok:lombok:1.18.8'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.8'
    testImplementation 'org.spockframework:spock-core:2.0-M3-groovy-3.0'

    itestImplementation(
            'org.junit.jupiter:junit-jupiter',
            'org.springframework.boot:spring-boot-starter-test',
            'com.h2database:h2'
    )
    itestAnnotationProcessor 'org.projectlombok:lombok:1.18.8'
}

repositories {
    mavenCentral()
    jcenter()
}
test {
    useJUnitPlatform()
}

bootJar {
    archiveBaseName = 'clean-code'
    archiveVersion = '1.0.0'
    archiveFileName = 'clean-code.jar'
    //archiveFileName = archiveBaseName + '-' + archiveVersion + '.jar'
    mainClassName = 'portaltek.cleancode.CleanCodeApp'
}


docker {
    name    'portaltek/clean-code:1.0.0'
    files   'build/libs/clean-code.jar'
    setDockerfile(file("cloud-infra/docker/build.dockerfile"))
}

dockerRun {
    name    'clean-code'
    image   'portaltek/clean-code:1.0.0'
    ports   '8080:8080'
    clean   true
}

task utest {
    //tasks.findByName('test').mustRunAfter 'assemble'
    def tasks = [clean, assemble, test]; dependsOn(tasks)
    for (int i = 0; i < tasks.size() - 1; i++) { tasks[i + 1].mustRunAfter(tasks[i]) }
}

task deleteDockerDB(type: Exec) {
    workingDir rootProject.projectDir
    commandLine 'sh', '-c', './src/itest/resources/docker/db.sh delete'
    setIgnoreExitValue(true)
}

task createDockerDB(type: Exec) {
    workingDir rootProject.projectDir
    commandLine 'sh', '-c', './src/itest/resources/docker/db.sh create'
    setIgnoreExitValue(false)
}

task itest(type: Test) {
    description = 'Runs integration tests.'
    group = 'verification'
    testClassesDirs = sourceSets.itest.output.classesDirs
    classpath = sourceSets.itest.runtimeClasspath
    useJUnitPlatform()

    def tasks = [utest, deleteDockerDB, createDockerDB]
    for (int i = 0; i < tasks.size() - 1; i++) { tasks[i + 1].mustRunAfter(tasks[i]) }
    dependsOn(tasks)
}

