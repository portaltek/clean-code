plugins {
    id 'org.springframework.boot' version '2.3.0.RELEASE'
    id "io.spring.dependency-management" version "1.0.6.RELEASE"
    id 'java'
    id 'idea'
    id "groovy"
    id "com.palantir.docker" version "0.22.1"
    id "com.palantir.docker-run" version "0.22.1"
}

description = """clean-code project"""
sourceCompatibility = 15
targetCompatibility = 15
version '1.0.0'

dependencies {

    implementation          'org.springframework.boot:spring-boot-starter-web'
    implementation          'org.springframework.boot:spring-boot-starter-actuator'
    implementation          'org.springframework.boot:spring-boot-starter-security'
    implementation          'org.springframework.boot:spring-boot-starter-data-jpa'
    runtimeOnly             'com.h2database:h2'
    testRuntimeOnly         'com.h2database:h2'
    testImplementation      'org.springframework.boot:spring-boot-starter-test'


    implementation          'org.apache.commons:commons-collections4:4.4'
    implementation          'org.apache.commons:commons-lang3:3.9'

    implementation          'org.slf4j:slf4j-api:1.7.25'
    implementation          'ch.qos.logback:logback-classic:1.2.3'
    implementation          'io.jsonwebtoken:jjwt:0.9.0'

    implementation          'org.projectlombok:lombok:1.18.8'
    annotationProcessor     'org.projectlombok:lombok:1.18.8'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.8'

    implementation          'org.codehaus.groovy:groovy:3.0.5'
    testImplementation      'org.spockframework:spock-core:2.0-M3-groovy-3.0'

}

repositories {
    mavenCentral()
    jcenter()
}
test {
    useJUnitPlatform()
}

bootJar {
    archiveBaseName = 'clean-code'
    archiveVersion = '1.0.0'
    archiveFileName = 'clean-code.jar'
    //archiveFileName = archiveBaseName + '-' + archiveVersion + '.jar'
}

docker {
    name    'portaltek/clean-code:1.0.0'
    files   'build/libs/clean-code.jar'
    setDockerfile(file("cloud-infra/docker/build.dockerfile"))
}

dockerRun {
    name    'clean-code'
    image   'portaltek/clean-code:1.0.0'
    ports   '8080:8080'
    clean   true
}




sourceSets {
    utest {
//        compileClasspath += sourceSets.main.output
//        runtimeClasspath += sourceSets.main.output
//        java.srcDir file('src/utest/java')
//        resources.srcDir file('src/utest/resources')
//        compileClasspath += sourceSets.main.output + configurations.testRuntimeClasspath
//        runtimeClasspath += output + compileClasspath
//        compileClasspath += sourceSets.main.output + configurations.testCompile
//        runtimeClasspath += output + compileClasspath + configurations.testRuntime
        java.srcDir "$projectDir/src/utest/java"
        resources.srcDir "$projectDir/src/utest/resources"
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
    }
    itest {
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
}

configurations {
    utestImplementation.extendsFrom implementation
    utestRuntime.extendsFrom runtime

    itestImplementation.extendsFrom testImplementation
    itestRuntime.extendsFrom testRuntime
}
dependencies {
    utestImplementation       'org.junit.jupiter:junit-jupiter'
    utestImplementation       'org.codehaus.groovy:groovy:3.0.5'
    utestImplementation       'org.spockframework:spock-core:2.0-M3-groovy-3.0'
    utestImplementation       'org.springframework.boot:spring-boot-starter-test'
    utestImplementation       'com.h2database:h2'

    itestImplementation       'org.junit.jupiter:junit-jupiter'
    itestImplementation       'org.codehaus.groovy:groovy:3.0.5'
    itestImplementation       'org.spockframework:spock-core:2.0-M3-groovy-3.0'
    itestImplementation       'org.springframework.boot:spring-boot-starter-test'
    itestImplementation       'com.h2database:h2'
}

task utest(type: Test) {
    description = 'Runs unit tests.'
    group = 'verification'
    testClassesDirs = sourceSets.utest.output.classesDirs
    classpath = sourceSets.utest.runtimeClasspath
    shouldRunAfter test
    useJUnitPlatform()
}
check.dependsOn utest

task itest(type: Test) {
    description = 'Runs integration tests.'
    group = 'verification'
    testClassesDirs = sourceSets.itest.output.classesDirs
    classpath = sourceSets.itest.runtimeClasspath
    shouldRunAfter test
    useJUnitPlatform()
}
check.dependsOn itest

