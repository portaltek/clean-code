---
AWSTemplateFormatVersion: '2010-09-09'
Description: Creates private network segment for Consul cluster, as well as autoscaling
  group for Consul server instances.
Parameters:
  Environment:
    Type: String
    Default: dv
    AllowedValues:
      - dv
      - qa
      - pt
      - st
      - pr
  ProjectId:
    Description: ProjectId = Project + environment
    Type: String
  VPC:
    Type: AWS::EC2::VPC::Id
    #Type: 'AWS::SSM::Parameter::Value<AWS::EC2::VPC::Id>'

  VpcCidr:
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Please specify the CIDR block as n.n.n.n/n
    Default: 10.0.0.0/16
    Description: CIDR block for this VPC
    MaxLength: '18'
    MinLength: '9'
    Type: String
  ConsulSubnet1Cidr:
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Please specify the CIDR block as n.n.n.n/n
    Default: 10.0.8.0/24
    Description: Consul Subnet 1 CIDR
    MaxLength: '18'
    MinLength: '9'
    Type: String
  ConsulSubnet2Cidr:
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Please specify the CIDR block as n.n.n.n/n
    Default: 10.0.9.0/24
    Description: Consul Subnet 2 CIDR
    MaxLength: '18'
    MinLength: '9'
    Type: String
  AvailabilityZone1:
    Description: Availability zones which contain the public/private subnets
    Type: AWS::EC2::AvailabilityZone::Name
    ConstraintDescription: must be the names of availability zones in this region
  AvailabilityZone2:
    Description: Availability zones which contain the public/private subnets
    Type: AWS::EC2::AvailabilityZone::Name
    ConstraintDescription: must be the names of availability zones in this region
  PrivateRouteTable1:
    Description: Private route table for private subnet
    Type: String
  PrivateRouteTable2:
    Description: Private route table for private subnet
    Type: String
  BastionSecurityGroup:
    Description: Security group for Bastion host
    Type: AWS::EC2::SecurityGroup::Id
    ConstraintDescription: must be a valid security group
  InstanceType:
    Type: String
    Default: t2.micro
    ConstraintDescription: must be a valid EC2 instance type.
  InstanceCount:
    Type: Number
    Default: '3'
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  ConsulAMI:
    #Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Type: AWS::EC2::Image::Id


Resources:
  ConsulSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock:
        Ref: ConsulSubnet1Cidr
      AvailabilityZone:
        Ref: AvailabilityZone1
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - "-"
              - - Ref: ProjectId
                - consul-subnet-1
        - Key: Environment
          Value:
            Ref: Environment
        - Key: Tier
          Value: Consul
  ConsulSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock:
        Ref: ConsulSubnet2Cidr
      AvailabilityZone:
        Ref: AvailabilityZone2
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - "-"
              - - Ref: ProjectId
                - consul-subnet-2
        - Key: Environment
          Value:
            Ref: Environment
        - Key: Tier
          Value: Consul
  ConsulSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: ConsulSubnet1
      RouteTableId:
        Ref: PrivateRouteTable1
  ConsulSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: ConsulSubnet2
      RouteTableId:
        Ref: PrivateRouteTable2
  ConsulNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - "-"
              - - Ref: ProjectId
                - consul-subnet-acl
        - Key: Environment
          Value:
            Ref: Environment
        - Key: Tier
          Value: Consul
  InboundPrivateNetworkTcpAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: ConsulNetworkAcl
      RuleNumber: '100'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '0'
        To: '65535'
  InboundPrivateNetworkUdpAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: ConsulNetworkAcl
      RuleNumber: '101'
      Protocol: '17'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '0'
        To: '65535'
  OutBoundPrivateNetworkTcpAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: ConsulNetworkAcl
      RuleNumber: '101'
      Protocol: '6'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '0'
        To: '65535'
  OutBoundPrivateNetworkUdpAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: ConsulNetworkAcl
      RuleNumber: '102'
      Protocol: '17'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '0'
        To: '65535'
  ConsulSubnetNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: ConsulSubnet1
      NetworkAclId:
        Ref: ConsulNetworkAcl
  ConsulSubnet2NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: ConsulSubnet2
      NetworkAclId:
        Ref: ConsulNetworkAcl
  ConsulEc2Policy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Policy for reading consul server information
      Path: "/"
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: ec2:Describe*
            Resource: "*"
  ConsulEc2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - Ref: ConsulEc2Policy
  ConsulInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - Ref: ConsulEc2Role

  ConsulServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP/S access on the configured port, as well as SSH
        access from bastion.
      VpcId:
        Ref: VPC
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
        - CidrIp: 0.0.0.0/0
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
        - CidrIp:
            Ref: VpcCidr
          FromPort: 8300
          IpProtocol: tcp
          ToPort: 8302
        - CidrIp:
            Ref: VpcCidr
          FromPort: 8300
          IpProtocol: udp
          ToPort: 8302
      SecurityGroupIngress:
        - SourceSecurityGroupId:
            Ref: BastionSecurityGroup
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
        - CidrIp:
            Ref: VpcCidr
          FromPort: 8300
          IpProtocol: tcp
          ToPort: 8302
        - CidrIp:
            Ref: VpcCidr
          FromPort: 8300
          IpProtocol: udp
          ToPort: 8302
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - "-"
              - - Ref: ProjectId
                - consul-server-security-group
        - Key: Environment
          Value:
            Ref: Environment
        - Key: Tier
          Value: Consul

  ConsulLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref ConsulAMI
      KeyName:
        Ref: KeyName
      UserData:
        Fn::Base64:
          Fn::Join:
            - ''
            - - "#cloud-config\n\n"
              - 'runcmd:

'
              - " - systemctl restart newrelic-infra\n"
      SecurityGroups:
        - Ref: ConsulServerSecurityGroup
      InstanceType:
        Ref: InstanceType
      InstanceMonitoring: 'false'
      IamInstanceProfile:
        Ref: ConsulInstanceProfile


  ConsulClusterGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - Ref: ConsulSubnet1
        - Ref: ConsulSubnet2
      LaunchConfigurationName:
        Ref: ConsulLaunchConfig
      MinSize: '3'
      MaxSize: '6'
      TerminationPolicies:
        - OldestLaunchConfiguration
        - OldestInstance
      DesiredCapacity:
        Ref: InstanceCount
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - "-"
              - - Ref: Environment
                - consul-server
          PropagateAtLaunch: 'true'
        - Key: role
          Value: Config
          PropagateAtLaunch: 'true'
        - Key: Tier
          Value: Consul
          PropagateAtLaunch: 'true'
        - Key: Environment
          Value:
            Ref: Environment
          PropagateAtLaunch: 'true'



Outputs:
  ConsulEc2Policy:
    Description: Managed Policy for Getting Consul Server Information
    Value:
      Ref: ConsulEc2Policy
