AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Creates private network segment for application resources, and caching
  resources to be used by instances
Parameters:
  VPC:
    Description: ID of existing VPC
    Type: 'AWS::EC2::VPC::Id'
    ConstraintDescription: must be the name of an existing VPC.
  CacheSubnet1Cidr:
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: Please specify the CIDR block as n.n.n.n/n
    Default: 10.0.3.0/24
    Description: Application Subnet 1 CIDR
    MaxLength: '18'
    MinLength: '9'
    Type: String
  CacheSubnet2Cidr:
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: Please specify the CIDR block as n.n.n.n/n
    Default: 10.0.4.0/24
    Description: Application Subnet 2 CIDR
    MaxLength: '18'
    MinLength: '9'
    Type: String
  AvailabilityZone1:
    Description: Availability zones which contain the public/private subnets
    Type: 'AWS::EC2::AvailabilityZone::Name'
    ConstraintDescription: must be the names of availability zones in this region
  AvailabilityZone2:
    Description: Availability zones which contain the public/private subnets
    Type: 'AWS::EC2::AvailabilityZone::Name'
    ConstraintDescription: must be the names of availability zones in this region
  PrivateRouteTable1:
    Description: Private route table for private subnet
    Type: String
  PrivateRouteTable2:
    Description: Private route table for private subnet
    Type: String
  Environment:
    Type: String
    Default: dv
    AllowedValues:
      - dv
      - qa
      - pt
      - st
      - pr
  ProjectId:
    Description: ProjectId = Project + environment
    Type: String
  ClusterNodeType:
    Default: cache.t2.micro
    Description: The compute and memory capacity of the nodes in the Redis Cluster
    Type: String
    AllowedValues:
      - cache.t2.micro
      - cache.t2.small
      - cache.t2.medium
      - cache.m3.medium
      - cache.m3.xlarge
      - cache.m3.large
      - cache.m3.xlarge
      - cache.m3.2xlarge
      - cache.r3.large
      - cache.r3.xlarge
      - cache.r3.2xlarge
      - cache.r3.4xlarge
      - cache.r3.8xlarge
    ConstraintDescription: must be a valid Cache Node type.
  AutomaticClusterFailover:
    Description: Does this cluster automatically support failover to read replica
    Type: String
    Default: 'false'
    AllowedValues:
      - 'true'
      - 'false'
  ClusterNodeCount:
    Description: Number of Cache Cluster nodes to launch
    Type: Number
    Default: '2'
Resources:
  CacheSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref CacheSubnet1Cidr
      AvailabilityZone: !Ref AvailabilityZone1
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref Environment
              - cache-subnet-1
        - Key: Environment
          Value: !Ref Environment
        - Key: Tier
          Value: Cache
  CacheSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref CacheSubnet2Cidr
      AvailabilityZone: !Ref AvailabilityZone2
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref Environment
              - app-subnet-2
        - Key: Environment
          Value: !Ref Environment
        - Key: Tier
          Value: Cache
  CacheSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref CacheSubnet1
      RouteTableId: !Ref PrivateRouteTable1
  CacheSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref CacheSubnet2
      RouteTableId: !Ref PrivateRouteTable2
  AppPrivateNetworkAcl:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref Environment
              - app-subnet-acl
        - Key: Environment
          Value: !Ref Environment
        - Key: Tier
          Value: Cache
  InboundAppTcpPrivateNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref AppPrivateNetworkAcl
      RuleNumber: '100'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '0'
        To: '65535'
  OutBoundAppTcpPrivateNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref AppPrivateNetworkAcl
      RuleNumber: '100'
      Protocol: '6'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '0'
        To: '65535'
  InboundAppUdpPrivateNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref AppPrivateNetworkAcl
      RuleNumber: '101'
      Protocol: '17'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '0'
        To: '65535'
  OutBoundAppUdpPrivateNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref AppPrivateNetworkAcl
      RuleNumber: '101'
      Protocol: '17'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '0'
        To: '65535'
  CacheSubnet1NetworkAclAssociation:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref CacheSubnet1
      NetworkAclId: !Ref AppPrivateNetworkAcl
  CacheSubnet2NetworkAclAssociation:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref CacheSubnet2
      NetworkAclId: !Ref AppPrivateNetworkAcl
  CacheCluster:
    Type: 'AWS::ElastiCache::ReplicationGroup'
    Properties:
      ReplicationGroupDescription: cache cluster for application sessions
      Engine: redis
      CacheNodeType: !Ref ClusterNodeType
      NumCacheClusters: !Ref ClusterNodeCount
      CacheSubnetGroupName: !Ref CacheClusterSubnetGroup
      AutomaticFailoverEnabled: !Ref AutomaticClusterFailover
      SecurityGroupIds:
        - !GetAtt
          - CacheClusterSecurityGroup
          - GroupId
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref Environment
              - cache-cluster
        - Key: Environment
          Value: !Ref Environment
        - Key: Tier
          Value: Cache
  CacheClusterSubnetGroup:
    Type: 'AWS::ElastiCache::SubnetGroup'
    Properties:
      Description: Cache Cluster Subnet Group
      SubnetIds:
        - !Ref CacheSubnet1
        - !Ref CacheSubnet2
  CacheClusterClientSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Identifies a cache cluster client
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref Environment
              - cache-cluster-client-security-group
        - Key: Environment
          Value: !Ref Environment
        - Key: Tier
          Value: Cache
  CacheClusterSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enables access to cache cluster for application instances
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '6379'
          ToPort: '6379'
          SourceSecurityGroupId: !Ref CacheClusterClientSecurityGroup
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref Environment
              - cache-cluster-security-group
        - Key: Environment
          Value: !Ref Environment
        - Key: Tier
          Value: Cache
Outputs:
  CacheSubnet1:
    Value: !Ref CacheSubnet1
  CacheSubnet2:
    Value: !Ref CacheSubnet2
  CacheEndpoint:
    Value: !GetAtt
      - CacheCluster
      - PrimaryEndPoint.Address
  ReplicationGroup:
    Value: !Ref CacheCluster
  CacheClusterClientSecurityGroup:
    Value: !Ref CacheClusterClientSecurityGroup
